

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   	boolean errorDetected;
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
		errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal READ, PRINT, NEW, RETURN, INC, DEC, EQUAL, PLUS, MINUS, DIV, MUL, MOD;
terminal LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET, CHAR;
terminal PROG, ENUM, CONST, SEMI, COMMA, DOT, VOID, BOOL;
terminal String IDENT;
terminal Integer NUMBER;


nonterminal Statement,  Addop, Mulop, PrintList, VarType, ConstType;
nonterminal DeclarationList, Declaration, ListVarDeclTypeList, VarDeclTypeList, VarDeclList, MethodDeclList;
nonterminal ConstDeclList, EnumDeclList, VarDecl, EnumDecl, ConstDecl, StatementList, FormalParamList, FormPars, FormalParamDecl;
nonterminal ActualPars, ActualParamList;

nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodDecl, MethodTypeName, Designator, Program, ProgName;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, DesignatorStatement, SignedExpr, Expr, Term, Factor;


Program ::= (Program) PROG ProgName:p DeclarationList LBRACE MethodDeclList RBRACE;

ProgName ::= (ProgName) IDENT:progName;

DeclarationList ::= (ProgDeclList) DeclarationList Declaration
				|
				(NoProgDeclList) /* epsilon */
				;

ConstType ::= (ConstType) Type:typeName;
Declaration ::= (ConstDeclaration) CONST ConstType:constType ConstDeclList SEMI
			|
			(VarDeclaration) VarDeclTypeList 
			|
			(EnumDeclaration) ENUM:enumName LBRACE EnumDeclList RBRACE SEMI
			;

ListVarDeclTypeList ::= (ListVarDeclTypeLists) ListVarDeclTypeList VarDeclTypeList
					|
					(NoListVarDeclTypeLists) /* epsilon */
					;
					
VarType ::= (VarType)Type:typeName;

VarDeclTypeList ::= (VarDeclarationTypeList) VarType:varType VarDeclList SEMI;

VarDeclList ::= (VarDeclarations) VarDeclList COMMA VarDecl
			|
			(SingleVarDeclaration) VarDecl
			;

VarDecl ::= (SingleVarDecl) IDENT:varName
			|
			(VarDeclArray) IDENT:varName LBRACKET RBRACKET
			;

EnumDeclList ::= (EnumDeclarations) EnumDeclList COMMA EnumDecl
			|
			(SingleEnumDeclarations) EnumDecl
			;

EnumDecl ::= (SingleEnumDecl) IDENT:enumName
			|
			(EnumDeclEqual) IDENT:enumName EQUAL NUMBER
			;

ConstDeclList ::= (ConstDeclarations) ConstDeclList COMMA ConstDecl
				|
				(SingleConstDeclaration) ConstDecl
				;

MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
				|
				(NoMethodDecl) /* epsilon */
				;			

MethodTypeName ::= (MethodVoidTypeName) VOID IDENT:methName
				|
				(MethodNoVoidTypeName) Type:retType IDENT:methName
				;

MethodDecl ::= (MethodDecl) MethodTypeName LPAREN FormPars RPAREN ListVarDeclTypeList LBRACE StatementList RBRACE;

FormPars ::= (FormParams) FormalParamList
		  |
		  (NoFormParam) /* epsilon */
		  ;
		  
FormalParamList ::= (FormalParamDecls) FormalParamList COMMA FormalParamDecl
				|
				(SingleFormalParamDecl) FormalParamDecl
				;

FormalParamDecl ::= (ParamDecl) Type IDENT:paramType
					|
					(ArrayParamDecl) Type IDENT:paramType LBRACKET RBRACKET
					;
					
ConstDecl ::= (NumConstDecl) IDENT:constName EQUAL NUMBER
			|
			(CharConstDecl) IDENT:constName EQUAL CHAR
			|
			(BoolConstDecl) IDENT:constName EQUAL BOOL
			;
	
StatementList ::= (StmtDeclarations) StatementList Statement
				|
				(NoStmtDeclarations) /* epsilon */
				;	
						
Statement ::= (DesignatorStmt) DesignatorStatement SEMI
			| 
			(ReadStmt) READ LPAREN Designator RPAREN SEMI
			| 
			(PrintStmt) PRINT LPAREN Expr PrintList RPAREN SEMI
			|
			(ReturnStmt) RETURN Expr:e SEMI
			|
			(ReturnNoExpr) RETURN SEMI
			;
	
PrintList ::= (PrintNumber) COMMA NUMBER
			|
			(NoPrintNumber) /* epsilon */
			;
			
DesignatorStatement ::= (Assignment) Designator:dest EQUAL Expr:e
					|
					(Increment) Designator:dest INC
					|
					(Decrement) Designator:dest DEC
					|
					(ProcCall) Designator:d LPAREN ActualPars RPAREN
					;

Expr ::= (NegExpr) MINUS SignedExpr:e
			|
			(PosExpr) SignedExpr:e
			;
				
SignedExpr ::= (AddopExpr) SignedExpr:te Addop Term:t
		|
		(TermExpr) Term:t
		;

Term ::= (MulopTerm) Term:t Mulop Factor:f
		|
		(FactorTerm) Factor:f
		;
		
Factor ::= (NumConstFact) NUMBER 
			|
			(CharConstFact) CHAR
			|
			(ExprFact) LPAREN Expr RPAREN
			|
			(BoolConstFact) BOOL
			|
			(NewFact) NEW Type
			|
			(NewExprFact) NEW Type LBRACKET Expr RBRACKET
			|
			(Var) Designator:d
			|
			(FuncCall) Designator:d LPAREN ActualPars RPAREN 
			;
			
ActualPars ::= (Actuals) ActualParamList
			|
			(NoActuals) /* epsilon */
			;
		
ActualParamList ::= (ActualParams) ActualParamList COMMA Expr
				|
				(ActualParam) Expr
				;
	
Addop ::= (PlusAddop) PLUS
		|
		(MinusAddop) MINUS
		;

Mulop ::= (MulMulop) MUL
		|
		(DivMulop) DIV
		| 
		(ModMulop) MOD
		;
		
Designator ::= (IdentDesign) IDENT:name
			|
			(SubIdendDesign) IDENT:name DOT IDENT:subName
			|
			(ArrIdentDesign) IDENT:name LBRACKET Expr RBRACKET
			;
			
Type ::= (Type) IDENT:typeName;